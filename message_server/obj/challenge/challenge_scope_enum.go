// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package challenge

import (
	"fmt"
	"strings"
)

const (
	// The type of the challenge is unknown.
	ChallengeScopeUNKNOWN ChallengeScope = iota
	// This type of challenge is issued to verify a user owns an email address.
	ChallengeScopeEMAIL
	// This type of challenge is issued to verify a user owns a private key corresponding to the given public key.
	ChallengeScopePUBKEY
)

var ErrInvalidChallengeScope = fmt.Errorf("not a valid ChallengeScope, try [%s]", strings.Join(_ChallengeScopeNames, ", "))

const _ChallengeScopeName = "UNKNOWNEMAILPUBKEY"

var _ChallengeScopeNames = []string{
	_ChallengeScopeName[0:7],
	_ChallengeScopeName[7:12],
	_ChallengeScopeName[12:18],
}

// ChallengeScopeNames returns a list of possible string values of ChallengeScope.
func ChallengeScopeNames() []string {
	tmp := make([]string, len(_ChallengeScopeNames))
	copy(tmp, _ChallengeScopeNames)
	return tmp
}

// ChallengeScopeValues returns a list of the values for ChallengeScope
func ChallengeScopeValues() []ChallengeScope {
	return []ChallengeScope{
		ChallengeScopeUNKNOWN,
		ChallengeScopeEMAIL,
		ChallengeScopePUBKEY,
	}
}

var _ChallengeScopeMap = map[ChallengeScope]string{
	ChallengeScopeUNKNOWN: _ChallengeScopeName[0:7],
	ChallengeScopeEMAIL:   _ChallengeScopeName[7:12],
	ChallengeScopePUBKEY:  _ChallengeScopeName[12:18],
}

// String implements the Stringer interface.
func (x ChallengeScope) String() string {
	if str, ok := _ChallengeScopeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ChallengeScope(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ChallengeScope) IsValid() bool {
	_, ok := _ChallengeScopeMap[x]
	return ok
}

var _ChallengeScopeValue = map[string]ChallengeScope{
	_ChallengeScopeName[0:7]:   ChallengeScopeUNKNOWN,
	_ChallengeScopeName[7:12]:  ChallengeScopeEMAIL,
	_ChallengeScopeName[12:18]: ChallengeScopePUBKEY,
}

// ParseChallengeScope attempts to convert a string to a ChallengeScope.
func ParseChallengeScope(name string) (ChallengeScope, error) {
	if x, ok := _ChallengeScopeValue[name]; ok {
		return x, nil
	}
	return ChallengeScope(0), fmt.Errorf("%s is %w", name, ErrInvalidChallengeScope)
}

// MustParseChallengeScope converts a string to a ChallengeScope, and panics if is not valid.
func MustParseChallengeScope(name string) ChallengeScope {
	val, err := ParseChallengeScope(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x ChallengeScope) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ChallengeScope) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseChallengeScope(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
