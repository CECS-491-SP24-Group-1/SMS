// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package challenge

import (
	"fmt"
	"strings"
)

const (
	// The type of the challenge is unknown.
	CTypeUNKNOWN CType = iota
	// This type of challenge is issued to verify that a user owns an email address.
	CTypeEMAIL
	// This type of challenge is issued to verify that a user owns a private key corresponding to the given public key.
	CTypePUBKEY
)

var ErrInvalidCType = fmt.Errorf("not a valid CType, try [%s]", strings.Join(_CTypeNames, ", "))

const _CTypeName = "UNKNOWNEMAILPUBKEY"

var _CTypeNames = []string{
	_CTypeName[0:7],
	_CTypeName[7:12],
	_CTypeName[12:18],
}

// CTypeNames returns a list of possible string values of CType.
func CTypeNames() []string {
	tmp := make([]string, len(_CTypeNames))
	copy(tmp, _CTypeNames)
	return tmp
}

// CTypeValues returns a list of the values for CType
func CTypeValues() []CType {
	return []CType{
		CTypeUNKNOWN,
		CTypeEMAIL,
		CTypePUBKEY,
	}
}

var _CTypeMap = map[CType]string{
	CTypeUNKNOWN: _CTypeName[0:7],
	CTypeEMAIL:   _CTypeName[7:12],
	CTypePUBKEY:  _CTypeName[12:18],
}

// String implements the Stringer interface.
func (x CType) String() string {
	if str, ok := _CTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CType) IsValid() bool {
	_, ok := _CTypeMap[x]
	return ok
}

var _CTypeValue = map[string]CType{
	_CTypeName[0:7]:   CTypeUNKNOWN,
	_CTypeName[7:12]:  CTypeEMAIL,
	_CTypeName[12:18]: CTypePUBKEY,
}

// ParseCType attempts to convert a string to a CType.
func ParseCType(name string) (CType, error) {
	if x, ok := _CTypeValue[name]; ok {
		return x, nil
	}
	return CType(0), fmt.Errorf("%s is %w", name, ErrInvalidCType)
}

// MustParseCType converts a string to a CType, and panics if is not valid.
func MustParseCType(name string) CType {
	val, err := ParseCType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x CType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
