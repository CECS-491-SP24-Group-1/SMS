// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package obj

import (
	"fmt"
	"strings"
)

const (
	// A challenge that has yet to be solved. This is the starting state of a challenge.
	ChallengeStatusPENDING ChallengeStatus = iota
	// A Challenge that failed to be verified for whatever reason.
	ChallengeStatusFAILED
	// A challenge that was successfully completed.
	ChallengeStatusPASSED
)

var ErrInvalidChallengeStatus = fmt.Errorf("not a valid ChallengeStatus, try [%s]", strings.Join(_ChallengeStatusNames, ", "))

const _ChallengeStatusName = "PENDINGFAILEDPASSED"

var _ChallengeStatusNames = []string{
	_ChallengeStatusName[0:7],
	_ChallengeStatusName[7:13],
	_ChallengeStatusName[13:19],
}

// ChallengeStatusNames returns a list of possible string values of ChallengeStatus.
func ChallengeStatusNames() []string {
	tmp := make([]string, len(_ChallengeStatusNames))
	copy(tmp, _ChallengeStatusNames)
	return tmp
}

// ChallengeStatusValues returns a list of the values for ChallengeStatus
func ChallengeStatusValues() []ChallengeStatus {
	return []ChallengeStatus{
		ChallengeStatusPENDING,
		ChallengeStatusFAILED,
		ChallengeStatusPASSED,
	}
}

var _ChallengeStatusMap = map[ChallengeStatus]string{
	ChallengeStatusPENDING: _ChallengeStatusName[0:7],
	ChallengeStatusFAILED:  _ChallengeStatusName[7:13],
	ChallengeStatusPASSED:  _ChallengeStatusName[13:19],
}

// String implements the Stringer interface.
func (x ChallengeStatus) String() string {
	if str, ok := _ChallengeStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ChallengeStatus(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ChallengeStatus) IsValid() bool {
	_, ok := _ChallengeStatusMap[x]
	return ok
}

var _ChallengeStatusValue = map[string]ChallengeStatus{
	_ChallengeStatusName[0:7]:   ChallengeStatusPENDING,
	_ChallengeStatusName[7:13]:  ChallengeStatusFAILED,
	_ChallengeStatusName[13:19]: ChallengeStatusPASSED,
}

// ParseChallengeStatus attempts to convert a string to a ChallengeStatus.
func ParseChallengeStatus(name string) (ChallengeStatus, error) {
	if x, ok := _ChallengeStatusValue[name]; ok {
		return x, nil
	}
	return ChallengeStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidChallengeStatus)
}

// MustParseChallengeStatus converts a string to a ChallengeStatus, and panics if is not valid.
func MustParseChallengeStatus(name string) ChallengeStatus {
	val, err := ParseChallengeStatus(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x ChallengeStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ChallengeStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseChallengeStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
