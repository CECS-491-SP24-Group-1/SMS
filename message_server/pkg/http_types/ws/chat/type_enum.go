// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package chat

import (
	"fmt"
	"strings"
)

const (
	// Unknown chat type.
	TypeUNKNOWN Type = iota
	// User message.
	TypeUMSG
	// Server message.
	TypeSMSG
	// Server error message.
	TypeSERR
	// A user joined the room.
	TypeJOINEVENT
	// A user left the room.
	TypeQUITEVENT
	// An encryption key sent by a user for the purpose of decrypting a group message.
	TypeEK
	// Step 1 of an X3DH KEX operation.
	TypeKEX1
	// Step 2 of an X3DH KEX operation.
	TypeKEX2
)

var ErrInvalidType = fmt.Errorf("not a valid Type, try [%s]", strings.Join(_TypeNames, ", "))

const _TypeName = "UNKNOWNU_MSGS_MSGS_ERRJOIN_EVENTQUIT_EVENTEKKEX1KEX2"

var _TypeNames = []string{
	_TypeName[0:7],
	_TypeName[7:12],
	_TypeName[12:17],
	_TypeName[17:22],
	_TypeName[22:32],
	_TypeName[32:42],
	_TypeName[42:44],
	_TypeName[44:48],
	_TypeName[48:52],
}

// TypeNames returns a list of possible string values of Type.
func TypeNames() []string {
	tmp := make([]string, len(_TypeNames))
	copy(tmp, _TypeNames)
	return tmp
}

// TypeValues returns a list of the values for Type
func TypeValues() []Type {
	return []Type{
		TypeUNKNOWN,
		TypeUMSG,
		TypeSMSG,
		TypeSERR,
		TypeJOINEVENT,
		TypeQUITEVENT,
		TypeEK,
		TypeKEX1,
		TypeKEX2,
	}
}

var _TypeMap = map[Type]string{
	TypeUNKNOWN:   _TypeName[0:7],
	TypeUMSG:      _TypeName[7:12],
	TypeSMSG:      _TypeName[12:17],
	TypeSERR:      _TypeName[17:22],
	TypeJOINEVENT: _TypeName[22:32],
	TypeQUITEVENT: _TypeName[32:42],
	TypeEK:        _TypeName[42:44],
	TypeKEX1:      _TypeName[44:48],
	TypeKEX2:      _TypeName[48:52],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Type) IsValid() bool {
	_, ok := _TypeMap[x]
	return ok
}

var _TypeValue = map[string]Type{
	_TypeName[0:7]:   TypeUNKNOWN,
	_TypeName[7:12]:  TypeUMSG,
	_TypeName[12:17]: TypeSMSG,
	_TypeName[17:22]: TypeSERR,
	_TypeName[22:32]: TypeJOINEVENT,
	_TypeName[32:42]: TypeQUITEVENT,
	_TypeName[42:44]: TypeEK,
	_TypeName[44:48]: TypeKEX1,
	_TypeName[48:52]: TypeKEX2,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is %w", name, ErrInvalidType)
}

// MustParseType converts a string to a Type, and panics if is not valid.
func MustParseType(name string) Type {
	val, err := ParseType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x Type) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Type) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
