// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package chat

import (
	"fmt"
	"strings"
)

const (
	TypeUKNOWN Type = iota
	TypeEVENT
	TypeMESSAGE
	TypeEK
	TypeKEX1
	TypeKEX2
)

var ErrInvalidType = fmt.Errorf("not a valid Type, try [%s]", strings.Join(_TypeNames, ", "))

const _TypeName = "UKNOWNEVENTMESSAGEEKKEX1KEX2"

var _TypeNames = []string{
	_TypeName[0:6],
	_TypeName[6:11],
	_TypeName[11:18],
	_TypeName[18:20],
	_TypeName[20:24],
	_TypeName[24:28],
}

// TypeNames returns a list of possible string values of Type.
func TypeNames() []string {
	tmp := make([]string, len(_TypeNames))
	copy(tmp, _TypeNames)
	return tmp
}

// TypeValues returns a list of the values for Type
func TypeValues() []Type {
	return []Type{
		TypeUKNOWN,
		TypeEVENT,
		TypeMESSAGE,
		TypeEK,
		TypeKEX1,
		TypeKEX2,
	}
}

var _TypeMap = map[Type]string{
	TypeUKNOWN:  _TypeName[0:6],
	TypeEVENT:   _TypeName[6:11],
	TypeMESSAGE: _TypeName[11:18],
	TypeEK:      _TypeName[18:20],
	TypeKEX1:    _TypeName[20:24],
	TypeKEX2:    _TypeName[24:28],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Type) IsValid() bool {
	_, ok := _TypeMap[x]
	return ok
}

var _TypeValue = map[string]Type{
	_TypeName[0:6]:   TypeUKNOWN,
	_TypeName[6:11]:  TypeEVENT,
	_TypeName[11:18]: TypeMESSAGE,
	_TypeName[18:20]: TypeEK,
	_TypeName[20:24]: TypeKEX1,
	_TypeName[24:28]: TypeKEX2,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is %w", name, ErrInvalidType)
}

// MustParseType converts a string to a Type, and panics if is not valid.
func MustParseType(name string) Type {
	val, err := ParseType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x Type) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Type) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
