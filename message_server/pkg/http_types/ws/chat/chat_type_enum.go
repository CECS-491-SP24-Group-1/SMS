// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package chat

import (
	"fmt"
	"strings"
)

const (
	ChatTypeUKNOWN ChatType = iota
	ChatTypeEVENT
	ChatTypeMESSAGE
	ChatTypeEK
	ChatTypeKEX1
	ChatTypeKEX2
)

var ErrInvalidChatType = fmt.Errorf("not a valid ChatType, try [%s]", strings.Join(_ChatTypeNames, ", "))

const _ChatTypeName = "UKNOWNEVENTMESSAGEEKKEX1KEX2"

var _ChatTypeNames = []string{
	_ChatTypeName[0:6],
	_ChatTypeName[6:11],
	_ChatTypeName[11:18],
	_ChatTypeName[18:20],
	_ChatTypeName[20:24],
	_ChatTypeName[24:28],
}

// ChatTypeNames returns a list of possible string values of ChatType.
func ChatTypeNames() []string {
	tmp := make([]string, len(_ChatTypeNames))
	copy(tmp, _ChatTypeNames)
	return tmp
}

// ChatTypeValues returns a list of the values for ChatType
func ChatTypeValues() []ChatType {
	return []ChatType{
		ChatTypeUKNOWN,
		ChatTypeEVENT,
		ChatTypeMESSAGE,
		ChatTypeEK,
		ChatTypeKEX1,
		ChatTypeKEX2,
	}
}

var _ChatTypeMap = map[ChatType]string{
	ChatTypeUKNOWN:  _ChatTypeName[0:6],
	ChatTypeEVENT:   _ChatTypeName[6:11],
	ChatTypeMESSAGE: _ChatTypeName[11:18],
	ChatTypeEK:      _ChatTypeName[18:20],
	ChatTypeKEX1:    _ChatTypeName[20:24],
	ChatTypeKEX2:    _ChatTypeName[24:28],
}

// String implements the Stringer interface.
func (x ChatType) String() string {
	if str, ok := _ChatTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ChatType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ChatType) IsValid() bool {
	_, ok := _ChatTypeMap[x]
	return ok
}

var _ChatTypeValue = map[string]ChatType{
	_ChatTypeName[0:6]:   ChatTypeUKNOWN,
	_ChatTypeName[6:11]:  ChatTypeEVENT,
	_ChatTypeName[11:18]: ChatTypeMESSAGE,
	_ChatTypeName[18:20]: ChatTypeEK,
	_ChatTypeName[20:24]: ChatTypeKEX1,
	_ChatTypeName[24:28]: ChatTypeKEX2,
}

// ParseChatType attempts to convert a string to a ChatType.
func ParseChatType(name string) (ChatType, error) {
	if x, ok := _ChatTypeValue[name]; ok {
		return x, nil
	}
	return ChatType(0), fmt.Errorf("%s is %w", name, ErrInvalidChatType)
}

// MustParseChatType converts a string to a ChatType, and panics if is not valid.
func MustParseChatType(name string) ChatType {
	val, err := ParseChatType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x ChatType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ChatType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseChatType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
