// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package chatroom

import (
	"fmt"
	"strings"
)

const (
	// The user is a regular member of the room.
	RoleMEMBER Role = iota
	// The user can add and remove members
	RoleMODERATOR
	// The user is the owner of the group and enjoys the same rights as moderators, but can delete the group too.
	RoleOWNER
)

var ErrInvalidRole = fmt.Errorf("not a valid Role, try [%s]", strings.Join(_RoleNames, ", "))

const _RoleName = "MEMBERMODERATOROWNER"

var _RoleNames = []string{
	_RoleName[0:6],
	_RoleName[6:15],
	_RoleName[15:20],
}

// RoleNames returns a list of possible string values of Role.
func RoleNames() []string {
	tmp := make([]string, len(_RoleNames))
	copy(tmp, _RoleNames)
	return tmp
}

// RoleValues returns a list of the values for Role
func RoleValues() []Role {
	return []Role{
		RoleMEMBER,
		RoleMODERATOR,
		RoleOWNER,
	}
}

var _RoleMap = map[Role]string{
	RoleMEMBER:    _RoleName[0:6],
	RoleMODERATOR: _RoleName[6:15],
	RoleOWNER:     _RoleName[15:20],
}

// String implements the Stringer interface.
func (x Role) String() string {
	if str, ok := _RoleMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Role(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Role) IsValid() bool {
	_, ok := _RoleMap[x]
	return ok
}

var _RoleValue = map[string]Role{
	_RoleName[0:6]:   RoleMEMBER,
	_RoleName[6:15]:  RoleMODERATOR,
	_RoleName[15:20]: RoleOWNER,
}

// ParseRole attempts to convert a string to a Role.
func ParseRole(name string) (Role, error) {
	if x, ok := _RoleValue[name]; ok {
		return x, nil
	}
	return Role(0), fmt.Errorf("%s is %w", name, ErrInvalidRole)
}

// MustParseRole converts a string to a Role, and panics if is not valid.
func MustParseRole(name string) Role {
	val, err := ParseRole(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x Role) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Role) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseRole(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
