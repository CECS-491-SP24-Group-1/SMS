// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package user

import (
	"fmt"
	"strings"
)

const (
	// Everyone is sent a read receipt.
	ReadReceiptsScopeEVERYONE ReadReceiptsScope = iota
	// Only friends are sent read receipts.
	ReadReceiptsScopeFRIENDS
	// Nobody is sent a read receipt
	ReadReceiptsScopeNOBODY
)

var ErrInvalidReadReceiptsScope = fmt.Errorf("not a valid ReadReceiptsScope, try [%s]", strings.Join(_ReadReceiptsScopeNames, ", "))

const _ReadReceiptsScopeName = "EVERYONEFRIENDSNOBODY"

var _ReadReceiptsScopeNames = []string{
	_ReadReceiptsScopeName[0:8],
	_ReadReceiptsScopeName[8:15],
	_ReadReceiptsScopeName[15:21],
}

// ReadReceiptsScopeNames returns a list of possible string values of ReadReceiptsScope.
func ReadReceiptsScopeNames() []string {
	tmp := make([]string, len(_ReadReceiptsScopeNames))
	copy(tmp, _ReadReceiptsScopeNames)
	return tmp
}

// ReadReceiptsScopeValues returns a list of the values for ReadReceiptsScope
func ReadReceiptsScopeValues() []ReadReceiptsScope {
	return []ReadReceiptsScope{
		ReadReceiptsScopeEVERYONE,
		ReadReceiptsScopeFRIENDS,
		ReadReceiptsScopeNOBODY,
	}
}

var _ReadReceiptsScopeMap = map[ReadReceiptsScope]string{
	ReadReceiptsScopeEVERYONE: _ReadReceiptsScopeName[0:8],
	ReadReceiptsScopeFRIENDS:  _ReadReceiptsScopeName[8:15],
	ReadReceiptsScopeNOBODY:   _ReadReceiptsScopeName[15:21],
}

// String implements the Stringer interface.
func (x ReadReceiptsScope) String() string {
	if str, ok := _ReadReceiptsScopeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ReadReceiptsScope(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ReadReceiptsScope) IsValid() bool {
	_, ok := _ReadReceiptsScopeMap[x]
	return ok
}

var _ReadReceiptsScopeValue = map[string]ReadReceiptsScope{
	_ReadReceiptsScopeName[0:8]:   ReadReceiptsScopeEVERYONE,
	_ReadReceiptsScopeName[8:15]:  ReadReceiptsScopeFRIENDS,
	_ReadReceiptsScopeName[15:21]: ReadReceiptsScopeNOBODY,
}

// ParseReadReceiptsScope attempts to convert a string to a ReadReceiptsScope.
func ParseReadReceiptsScope(name string) (ReadReceiptsScope, error) {
	if x, ok := _ReadReceiptsScopeValue[name]; ok {
		return x, nil
	}
	return ReadReceiptsScope(0), fmt.Errorf("%s is %w", name, ErrInvalidReadReceiptsScope)
}

// MustParseReadReceiptsScope converts a string to a ReadReceiptsScope, and panics if is not valid.
func MustParseReadReceiptsScope(name string) ReadReceiptsScope {
	val, err := ParseReadReceiptsScope(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x ReadReceiptsScope) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ReadReceiptsScope) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseReadReceiptsScope(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
