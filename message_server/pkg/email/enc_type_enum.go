// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package email

import (
	"fmt"
	"strings"
)

const (
	// No encryption will be applied. This is not recommended.
	EncTypeNONE EncType = iota
	// Encryption will be mandated. This should only be used if you care more about security than delivery success.
	EncTypeREQUIRE EncType = iota + 2
	// Opportunistic encryption will be applied. This is the recommended option.
	EncTypeSTARTTLS
)

var ErrInvalidEncType = fmt.Errorf("not a valid EncType, try [%s]", strings.Join(_EncTypeNames, ", "))

const _EncTypeName = "NONEREQUIRESTARTTLS"

var _EncTypeNames = []string{
	_EncTypeName[0:4],
	_EncTypeName[4:11],
	_EncTypeName[11:19],
}

// EncTypeNames returns a list of possible string values of EncType.
func EncTypeNames() []string {
	tmp := make([]string, len(_EncTypeNames))
	copy(tmp, _EncTypeNames)
	return tmp
}

// EncTypeValues returns a list of the values for EncType
func EncTypeValues() []EncType {
	return []EncType{
		EncTypeNONE,
		EncTypeREQUIRE,
		EncTypeSTARTTLS,
	}
}

var _EncTypeMap = map[EncType]string{
	EncTypeNONE:     _EncTypeName[0:4],
	EncTypeREQUIRE:  _EncTypeName[4:11],
	EncTypeSTARTTLS: _EncTypeName[11:19],
}

// String implements the Stringer interface.
func (x EncType) String() string {
	if str, ok := _EncTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EncType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EncType) IsValid() bool {
	_, ok := _EncTypeMap[x]
	return ok
}

var _EncTypeValue = map[string]EncType{
	_EncTypeName[0:4]:   EncTypeNONE,
	_EncTypeName[4:11]:  EncTypeREQUIRE,
	_EncTypeName[11:19]: EncTypeSTARTTLS,
}

// ParseEncType attempts to convert a string to a EncType.
func ParseEncType(name string) (EncType, error) {
	if x, ok := _EncTypeValue[name]; ok {
		return x, nil
	}
	return EncType(0), fmt.Errorf("%s is %w", name, ErrInvalidEncType)
}

// MustParseEncType converts a string to a EncType, and panics if is not valid.
func MustParseEncType(name string) EncType {
	val, err := ParseEncType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x EncType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EncType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEncType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
