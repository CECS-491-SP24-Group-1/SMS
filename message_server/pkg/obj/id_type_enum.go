// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package obj

import (
	"fmt"
	"strings"
)

const (
	IdTypeUSER IdType = iota
	IdTypeSERVER
	IdTypeMESSAGE
	IdTypeCHALLENGE
	IdTypeTOKEN
)

var ErrInvalidIdType = fmt.Errorf("not a valid IdType, try [%s]", strings.Join(_IdTypeNames, ", "))

const _IdTypeName = "USERSERVERMESSAGECHALLENGETOKEN"

var _IdTypeNames = []string{
	_IdTypeName[0:4],
	_IdTypeName[4:10],
	_IdTypeName[10:17],
	_IdTypeName[17:26],
	_IdTypeName[26:31],
}

// IdTypeNames returns a list of possible string values of IdType.
func IdTypeNames() []string {
	tmp := make([]string, len(_IdTypeNames))
	copy(tmp, _IdTypeNames)
	return tmp
}

// IdTypeValues returns a list of the values for IdType
func IdTypeValues() []IdType {
	return []IdType{
		IdTypeUSER,
		IdTypeSERVER,
		IdTypeMESSAGE,
		IdTypeCHALLENGE,
		IdTypeTOKEN,
	}
}

var _IdTypeMap = map[IdType]string{
	IdTypeUSER:      _IdTypeName[0:4],
	IdTypeSERVER:    _IdTypeName[4:10],
	IdTypeMESSAGE:   _IdTypeName[10:17],
	IdTypeCHALLENGE: _IdTypeName[17:26],
	IdTypeTOKEN:     _IdTypeName[26:31],
}

// String implements the Stringer interface.
func (x IdType) String() string {
	if str, ok := _IdTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("IdType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IdType) IsValid() bool {
	_, ok := _IdTypeMap[x]
	return ok
}

var _IdTypeValue = map[string]IdType{
	_IdTypeName[0:4]:   IdTypeUSER,
	_IdTypeName[4:10]:  IdTypeSERVER,
	_IdTypeName[10:17]: IdTypeMESSAGE,
	_IdTypeName[17:26]: IdTypeCHALLENGE,
	_IdTypeName[26:31]: IdTypeTOKEN,
}

// ParseIdType attempts to convert a string to a IdType.
func ParseIdType(name string) (IdType, error) {
	if x, ok := _IdTypeValue[name]; ok {
		return x, nil
	}
	return IdType(0), fmt.Errorf("%s is %w", name, ErrInvalidIdType)
}

// MustParseIdType converts a string to a IdType, and panics if is not valid.
func MustParseIdType(name string) IdType {
	val, err := ParseIdType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x IdType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *IdType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseIdType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
