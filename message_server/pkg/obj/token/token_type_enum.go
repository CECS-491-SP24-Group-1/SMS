// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package token

import (
	"fmt"
	"strings"
)

const (
	TokenTypeNONE TokenType = iota
	TokenTypeACCESS
	TokenTypeREFRESH
)

var ErrInvalidTokenType = fmt.Errorf("not a valid TokenType, try [%s]", strings.Join(_TokenTypeNames, ", "))

const _TokenTypeName = "NONEACCESSREFRESH"

var _TokenTypeNames = []string{
	_TokenTypeName[0:4],
	_TokenTypeName[4:10],
	_TokenTypeName[10:17],
}

// TokenTypeNames returns a list of possible string values of TokenType.
func TokenTypeNames() []string {
	tmp := make([]string, len(_TokenTypeNames))
	copy(tmp, _TokenTypeNames)
	return tmp
}

// TokenTypeValues returns a list of the values for TokenType
func TokenTypeValues() []TokenType {
	return []TokenType{
		TokenTypeNONE,
		TokenTypeACCESS,
		TokenTypeREFRESH,
	}
}

var _TokenTypeMap = map[TokenType]string{
	TokenTypeNONE:    _TokenTypeName[0:4],
	TokenTypeACCESS:  _TokenTypeName[4:10],
	TokenTypeREFRESH: _TokenTypeName[10:17],
}

// String implements the Stringer interface.
func (x TokenType) String() string {
	if str, ok := _TokenTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TokenType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TokenType) IsValid() bool {
	_, ok := _TokenTypeMap[x]
	return ok
}

var _TokenTypeValue = map[string]TokenType{
	_TokenTypeName[0:4]:   TokenTypeNONE,
	_TokenTypeName[4:10]:  TokenTypeACCESS,
	_TokenTypeName[10:17]: TokenTypeREFRESH,
}

// ParseTokenType attempts to convert a string to a TokenType.
func ParseTokenType(name string) (TokenType, error) {
	if x, ok := _TokenTypeValue[name]; ok {
		return x, nil
	}
	return TokenType(0), fmt.Errorf("%s is %w", name, ErrInvalidTokenType)
}

// MustParseTokenType converts a string to a TokenType, and panics if is not valid.
func MustParseTokenType(name string) TokenType {
	val, err := ParseTokenType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x TokenType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TokenType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseTokenType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
