// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package notification

import (
	"fmt"
	"strings"
)

const (
	// The type of the notification is unknown.
	TypeUNKNOWN Type = iota
	// A notification fired off when a new message is received.
	TypeNEWMSG
	// A notification fired off when a friend request was accepted.
	TypeFRQACCEPT
	// A notification fired off when a friend request was rejected.
	TypeFRQREJECT
	// A notification fired off when a friend request has been received.
	TypeFRQNEW
)

var ErrInvalidType = fmt.Errorf("not a valid Type, try [%s]", strings.Join(_TypeNames, ", "))

const _TypeName = "UNKNOWNNEW_MSGFRQ_ACCEPTFRQ_REJECTFRQ_NEW"

var _TypeNames = []string{
	_TypeName[0:7],
	_TypeName[7:14],
	_TypeName[14:24],
	_TypeName[24:34],
	_TypeName[34:41],
}

// TypeNames returns a list of possible string values of Type.
func TypeNames() []string {
	tmp := make([]string, len(_TypeNames))
	copy(tmp, _TypeNames)
	return tmp
}

// TypeValues returns a list of the values for Type
func TypeValues() []Type {
	return []Type{
		TypeUNKNOWN,
		TypeNEWMSG,
		TypeFRQACCEPT,
		TypeFRQREJECT,
		TypeFRQNEW,
	}
}

var _TypeMap = map[Type]string{
	TypeUNKNOWN:   _TypeName[0:7],
	TypeNEWMSG:    _TypeName[7:14],
	TypeFRQACCEPT: _TypeName[14:24],
	TypeFRQREJECT: _TypeName[24:34],
	TypeFRQNEW:    _TypeName[34:41],
}

// String implements the Stringer interface.
func (x Type) String() string {
	if str, ok := _TypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Type(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Type) IsValid() bool {
	_, ok := _TypeMap[x]
	return ok
}

var _TypeValue = map[string]Type{
	_TypeName[0:7]:   TypeUNKNOWN,
	_TypeName[7:14]:  TypeNEWMSG,
	_TypeName[14:24]: TypeFRQACCEPT,
	_TypeName[24:34]: TypeFRQREJECT,
	_TypeName[34:41]: TypeFRQNEW,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(0), fmt.Errorf("%s is %w", name, ErrInvalidType)
}

// MustParseType converts a string to a Type, and panics if is not valid.
func MustParseType(name string) Type {
	val, err := ParseType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x Type) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Type) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
