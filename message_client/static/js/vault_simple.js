/*
DEPENDS:
	- uuid.js: https://gist.github.com/fabiolimace/c725349dd34aedc7b69867dabec59c08
	- FileSaver.js: https://github.com/eligrey/FileSaver.js
*/

//-- Constants
//The size of the cryptographic keys in bytes.
const KEY_SIZE = 32;


//-- Classes
/** 
 * Stores user data clientside. This is a stripped back version of a vault
 * that's defined in the clientside class diagram.
 */
class Vault {
	/**
	 * Constructs a new `Vault` object.
	 * @param {string} subject The ID of the person to whom this vault 
	 * belongs. This is expected to be a UUIDv7, but may start out as a
	 * nil UUID
	 * @param {uint8[32]} sk The private key of the vault owner
	 * @param {uint8[32]} pk The public key of the vault owner
	 */
	constructor(subject, sk, pk){
		this.id = uuid7();
		this.subject = subject; //Previously the `for` field
		this.lastMod = new Date();
		this.notes = "stripped back vault; generated by vault_simple.js";
		this.devIdent = window.navigator.userAgent;
		this.kstore = new KeyStore(sk, pk);
	}

	/**
	 * Exports a vault as a JSON string, prompting the user to save it to
	 * their device.
	 */
	export(){
		const blob = new Blob([this.toString()], {
			type: "text/plain;charset=utf-8;",
		});
		saveAs(blob, `vault_${this.id}.json`);
	}

	/**
	 * Derives a `Vault` object from the JSON representation of one.
	 * @param {string} str The JSON string to ingest
	 * @returns {Vault} The derived `Vault` object
	 * @throws {Error} If the JSON failed to parse for whatever reason
	 */
	static fromString(str){
		//Convert the input string to a JSONObject
		const json = JSON.parse(str);

		//Parse out the 2 uint8 arrays from the JSON object
		const sk = new Uint8Array(json.kstore.sk, 0, KEY_SIZE);
		const pk = new Uint8Array(json.kstore.pk, 0, KEY_SIZE);

		//Create a new vault object
		const vault = new Vault(json.subject, sk, pk);

		//Replace the properties of the object with those in the JSON
		vault.id = json.id;
		vault.lastMod = new Date(json.lastMod);
		vault.notes = json.notes;
		vault.devIdent = json.devIdent;
		
		//Emit the vault object
		return vault;
	}

	/**
	 * Converts this class to its string representation.
	 * @returns {string} The string representation of this instance
	 */
	toString(){
		//Do the initial conversion to a JSON object
		const json = JSON.parse(JSON.stringify(this));

		//Replace the uint8 arrays with normal arrays
		json.kstore.sk = Array.from(this.kstore.sk);
		json.kstore.pk = Array.from(this.kstore.pk);

		//Emit the modified JSON object as a string
		return JSON.stringify(json);
	}
}

/** Stores cryptographic keys. */
class KeyStore {
	/**
	 * Creates a new `KeyStore` object.
	 * @param {uint8[32]} sk The private key
	 * @param {uint8[32]} pk The public key
	 */
	constructor(sk, pk){
		this.sk = new Uint8Array(sk, 0, KEY_SIZE);
		this.pk = new Uint8Array(pk, 0, KEY_SIZE);
	}

	/**
	 * Exports the private key as a base64 string.
	 * @returns {string} The base64 string version of the private key.
	 */
	skString(){
		return btoa(String.fromCharCode.apply(null, this.sk));
	}

	/**
	 * Exports the public key as a base64 string.
	 * @returns {string} The base64 string version of the public key.
	 */
	pkString(){
		return btoa(String.fromCharCode.apply(null, this.pk));
	}
}